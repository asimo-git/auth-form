import { useMutation } from "@tanstack/react-query";
import { message } from "antd";

interface LoginData {
  email: string;
  password: string;
}

export function useLogin() {
  return useMutation({
    mutationFn: async (data: LoginData) => {
      // –∏–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
      await new Promise((r) => setTimeout(r, 900));

      const { email, password } = data;

      if (!email.includes("a") || !password.includes("a")) {
        throw Object.assign(new Error("Invalid email or password"), {
          status: 400,
        });
      }

      // üîπ —Å–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      if (Math.random() < 0.1) {
        throw Object.assign(new Error("Server error"), {
          status: 500,
        });
      }

      throw Object.assign(new Error("2FA required"), {
        status: 202,
        tempToken: "temp-xyz-123",
      });

      //   return {
      //     status: 200,
      //     message: "Login successful",
      //     token: "auth-abc-999",
      //   };
    },

    // –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ 200:
    //  onSuccess: (data) => {
    //   message.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    //   console.log("–¢–æ–∫–µ–Ω:", data.token);
    // },

    onError: (error) => {
      switch ((error as Error & { status: number }).status) {
        case 400:
          message.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
          break;
        case 401:
          message.error("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA");
          break;
        case 403:
          message.error("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
          break;
        case 429:
          message.warning("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ");
          break;
        case 500:
          message.error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ");
          break;
        default:
          message.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
      }
    },
  });
}
